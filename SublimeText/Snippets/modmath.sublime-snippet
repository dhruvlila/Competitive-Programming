<snippet>
  <content><![CDATA[
ll add(ll a, ll b, ll n){
   a += n; a %= n; b+=n; b %= n;
   ll s = a+b;
   s %= n;
   return s;
}

ll mult(ll a, ll b, ll n) { 
   ll res = 0;
   a %= n;
   while(b){
      if(b & 1) res = add(res, a, n);
      a *= 2; a %= n;
      b >>= 1;
   }
   return res;
} 

ll mod_inverse(ll a, ll m){
   ll m0 = m, t, q;
   ll x0 = 0, x1 = 1;
   if (m == 1) return 0;
   while (a > 1){
      q = a / m;
      t = m;
      m = a % m, a = t;
      t = x0;
      x0 = x1 - q * x0;
      x1 = t;
   }
   if (x1 < 0) x1 += m0;
   return x1;
}

ll div(ll a, ll b, ll n) {
   a %= n;
   ll inverse = mod_inverse(b, n);
   if(inverse == -1){
      return -1;
   }
   else{
      return mult(a, inverse, n);
   }
}

ll power(ll x, ll y, ll p){ 
   ll res = 1;
   x %= p;
   if (x == 0) return 0;
   while(y){
      if(y&1) res = mult(res, x, p);
      y = y>>1;
      x = mult(x, x, p);
   }
   return res;
}  
]]></content>
  <tabTrigger>modmath</tabTrigger>
  <description>Modular Arithmetic</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>